{
  "version": 3,
  "sources": ["../index.js", "../src/utils/cors.js", "../src/utils/logging.js", "../src/utils/key-generator.js", "../src/db/client.js", "../src/db/game-state.js", "../src/api/game-state.js", "../src/api/health.js"],
  "sourcesContent": ["/**\r\n * PTCG-Sim-Meta Worker Entry Point\r\n * \r\n * This is the main entry file for the Cloudflare Worker that handles\r\n * API requests and ensures proper MIME types for static files.\r\n */\r\n\r\nimport { Router } from 'itty-router';\r\nimport { corsHeaders, handleOptions } from './src/utils/cors.js';\r\n\r\n// Import API handlers\r\nimport * as gameStateApi from './src/api/game-state.js';\r\nimport * as healthApi from './src/api/health.js';\r\n\r\n/**\r\n * Create a new router instance for handling API routes\r\n */\r\nconst router = Router();\r\n\r\n/**\r\n * Register API routes with the router\r\n */\r\n\r\n// Handle CORS preflight requests\r\nrouter.options('*', handleOptions);\r\n\r\n// Health check endpoints\r\nrouter.get('/health', healthApi.getHealth);\r\nrouter.get('/api/health', healthApi.getHealth);\r\n\r\n// Game state management endpoints\r\nrouter.get('/api/importData', gameStateApi.getGameState);\r\nrouter.post('/api/storeGameState', gameStateApi.storeGameState);\r\nrouter.delete('/api/gameState/:key', gameStateApi.deleteGameState);\r\nrouter.get('/api/stats', gameStateApi.getStats);\r\n\r\n// Catch-all for any unrecognized API routes\r\nrouter.all('/api/*', () => new Response('API endpoint not found', { status: 404 }));\r\n\r\n/**\r\n * Main Worker export - this is the entry point Cloudflare calls\r\n */\r\nexport default {\r\n  /**\r\n   * Main fetch handler for all incoming requests\r\n   * \r\n   * @param {Request} request - The incoming HTTP request\r\n   * @param {Object} env - Environment variables and bindings\r\n   * @param {Object} ctx - Execution context\r\n   * @returns {Response} HTTP response\r\n   */\r\n  async fetch(request, env, ctx) {\r\n    try {\r\n      // Add environment to request for handlers to access\r\n      request.env = env;\r\n      \r\n      // Parse the URL from the request\r\n      const url = new URL(request.url);\r\n      \r\n      // Log requests in debug mode\r\n      if (env.LOG_LEVEL === 'debug') {\r\n        console.log(`${request.method} ${url.pathname}`);\r\n      }\r\n      \r\n      // -------------------------------------------------------------------------\r\n      // PART 1: API REQUEST HANDLING\r\n      // -------------------------------------------------------------------------\r\n      \r\n      // For API requests, use the router\r\n      if (url.pathname.startsWith('/api/') || url.pathname === '/health') {\r\n        const response = await router.handle(request);\r\n        \r\n        // Add CORS headers to all responses\r\n        Object.entries(corsHeaders).forEach(([key, value]) => {\r\n          response.headers.set(key, value);\r\n        });\r\n        \r\n        return response;\r\n      }\r\n      \r\n      // -------------------------------------------------------------------------\r\n      // PART 2: STATIC FILE HANDLING WITH MIME TYPE CORRECTION\r\n      // -------------------------------------------------------------------------\r\n      \r\n      // For JavaScript files, ensure correct MIME type\r\n      if (\r\n        url.pathname.endsWith('.js') || \r\n        url.pathname.endsWith('.mjs') ||\r\n        url.pathname.includes('.module.js')\r\n      ) {\r\n        try {\r\n          // Fetch the original resource\r\n          const originalResponse = await fetch(request);\r\n          \r\n          // Check if the response was successful\r\n          if (!originalResponse.ok) {\r\n            return originalResponse; // Pass through error responses\r\n          }\r\n          \r\n          // Create a new response with the correct MIME type\r\n          return new Response(originalResponse.body, {\r\n            status: originalResponse.status,\r\n            statusText: originalResponse.statusText,\r\n            headers: {\r\n              ...Object.fromEntries([...originalResponse.headers.entries()]),\r\n              'Content-Type': 'application/javascript; charset=utf-8'\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(`Error handling JavaScript file: ${error.message}`);\r\n          return fetch(request); // Fallback to original request\r\n        }\r\n      }\r\n      \r\n      // For CSS files, ensure correct MIME type\r\n      if (url.pathname.endsWith('.css')) {\r\n        try {\r\n          const originalResponse = await fetch(request);\r\n          \r\n          if (!originalResponse.ok) {\r\n            return originalResponse;\r\n          }\r\n          \r\n          return new Response(originalResponse.body, {\r\n            status: originalResponse.status,\r\n            statusText: originalResponse.statusText,\r\n            headers: {\r\n              ...Object.fromEntries([...originalResponse.headers.entries()]),\r\n              'Content-Type': 'text/css; charset=utf-8'\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(`Error handling CSS file: ${error.message}`);\r\n          return fetch(request); // Fallback to original request\r\n        }\r\n      }\r\n      \r\n      // For JSON and map files, ensure correct MIME type\r\n      if (url.pathname.endsWith('.json') || url.pathname.endsWith('.map')) {\r\n        try {\r\n          const originalResponse = await fetch(request);\r\n          \r\n          if (!originalResponse.ok) {\r\n            return originalResponse;\r\n          }\r\n          \r\n          return new Response(originalResponse.body, {\r\n            status: originalResponse.status,\r\n            statusText: originalResponse.statusText,\r\n            headers: {\r\n              ...Object.fromEntries([...originalResponse.headers.entries()]),\r\n              'Content-Type': 'application/json; charset=utf-8'\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(`Error handling JSON file: ${error.message}`);\r\n          return fetch(request); // Fallback to original request\r\n        }\r\n      }\r\n      \r\n      // -------------------------------------------------------------------------\r\n      // PART 3: PASS-THROUGH FOR OTHER REQUESTS\r\n      // -------------------------------------------------------------------------\r\n      \r\n      // For all other requests, pass through to the origin\r\n      return fetch(request);\r\n    } catch (error) {\r\n      // -------------------------------------------------------------------------\r\n      // PART 4: ERROR HANDLING\r\n      // -------------------------------------------------------------------------\r\n      \r\n      // Log detailed error information\r\n      console.error(`Error handling request: ${error.message}`);\r\n      if (error.stack) {\r\n        console.error(`Stack trace: ${error.stack}`);\r\n      }\r\n      \r\n      // Return a structured JSON error response\r\n      return new Response(\r\n        JSON.stringify({ \r\n          success: false, \r\n          error: 'Internal Server Error',\r\n          message: error.message \r\n        }), \r\n        { \r\n          status: 500,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n};", "// File: workers/src/utils/cors.js\r\n/**\r\n * Enhanced CORS utility functions for PTCG-Sim-Meta\r\n * \r\n * Provides robust CORS headers and handlers for cross-origin requests\r\n * with specific support for Socket.IO connections\r\n */\r\n\r\n// Define allowed origins with expanded domains for better compatibility\r\nexport const allowedOrigins = [\r\n    'https://ptcg-sim-meta.pages.dev',\r\n    'https://ptcg-sim-meta-dev.pages.dev',\r\n    'http://localhost:3000',\r\n    'http://localhost:4000',\r\n    'http://127.0.0.1:3000',\r\n    'http://127.0.0.1:4000'\r\n  ];\r\n  \r\n  /**\r\n   * Basic CORS headers for standard requests\r\n   */\r\n  export const corsHeaders = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\r\n    'Access-Control-Max-Age': '86400' // 24 hours\r\n  };\r\n  \r\n  /**\r\n   * Get expanded CORS headers with origin-specific settings\r\n   * \r\n   * @param {Request} request - HTTP request\r\n   * @returns {Object} - CORS headers tailored to the request\r\n   */\r\n  export function getExpandedCorsHeaders(request) {\r\n    const origin = request.headers.get('Origin');\r\n    const headers = { ...corsHeaders };\r\n    \r\n    // Set origin-specific header if origin is in allowed list\r\n    if (origin && allowedOrigins.includes(origin)) {\r\n      headers['Access-Control-Allow-Origin'] = origin;\r\n      headers['Access-Control-Allow-Credentials'] = 'true';\r\n    }\r\n    \r\n    // Add WebSocket and Socket.IO specific headers\r\n    headers['Access-Control-Allow-Headers'] += ', Upgrade, Connection';\r\n    \r\n    return headers;\r\n  }\r\n  \r\n  /**\r\n   * Handle OPTIONS requests for CORS preflight\r\n   * \r\n   * @param {Request} request - HTTP request\r\n   * @returns {Response} HTTP response with CORS headers\r\n   */\r\n  export function handleOptions(request) {\r\n    const headers = getExpandedCorsHeaders(request);\r\n    \r\n    return new Response(null, {\r\n      status: 204,\r\n      headers\r\n    });\r\n  }", "/**\r\n * Logging utilities\r\n * \r\n * This module provides consistent logging functions with different\r\n * severity levels and optional debug mode toggling.\r\n */\r\n\r\n// Whether debug logging is enabled\r\nlet debugMode = false;\r\n\r\n/**\r\n * Enable or disable debug logging\r\n * \r\n * @param {boolean} enabled - Whether debug logging should be enabled\r\n */\r\nexport function setDebugMode(enabled) {\r\n  debugMode = enabled;\r\n}\r\n\r\n/**\r\n * Log a message with a specified severity level\r\n * \r\n * @param {string} message - Message to log\r\n * @param {string} level - Log level (info, warn, error, debug, success)\r\n */\r\nexport function log(message, level = 'info') {\r\n  // Get current timestamp\r\n  const timestamp = new Date().toISOString();\r\n  \r\n  // Skip debug messages when debug mode is disabled\r\n  if (level === 'debug' && !debugMode) {\r\n    return;\r\n  }\r\n  \r\n  // Format message based on level\r\n  let formattedMessage;\r\n  \r\n  switch (level) {\r\n    case 'error':\r\n      formattedMessage = `[${timestamp}] ERROR: ${message}`;\r\n      console.error(formattedMessage);\r\n      break;\r\n    case 'warn':\r\n      formattedMessage = `[${timestamp}] WARNING: ${message}`;\r\n      console.warn(formattedMessage);\r\n      break;\r\n    case 'debug':\r\n      formattedMessage = `[${timestamp}] DEBUG: ${message}`;\r\n      console.debug(formattedMessage);\r\n      break;\r\n    case 'success':\r\n      formattedMessage = `[${timestamp}] SUCCESS: ${message}`;\r\n      console.log(formattedMessage);\r\n      break;\r\n    default:\r\n      formattedMessage = `[${timestamp}] INFO: ${message}`;\r\n      console.log(formattedMessage);\r\n  }\r\n}\r\n\r\n/**\r\n * Log an error with stack trace\r\n * \r\n * @param {Error} error - Error object to log\r\n * @param {string} context - Optional context description\r\n */\r\nexport function logError(error, context = '') {\r\n  const contextMsg = context ? ` [${context}]` : '';\r\n  log(`${error.message}${contextMsg}`, 'error');\r\n  \r\n  if (debugMode && error.stack) {\r\n    log(`Stack trace: ${error.stack}`, 'debug');\r\n  }\r\n}\r\n\r\n/**\r\n * Log a request\r\n * \r\n * @param {Request} request - HTTP request to log\r\n */\r\nexport function logRequest(request) {\r\n  const url = new URL(request.url);\r\n  const method = request.method;\r\n  const path = url.pathname;\r\n  const query = url.search;\r\n  \r\n  log(`${method} ${path}${query}`, 'info');\r\n  \r\n  if (debugMode) {\r\n    // Log headers in debug mode\r\n    const headers = {};\r\n    for (const [key, value] of request.headers.entries()) {\r\n      headers[key] = value;\r\n    }\r\n    log(`Headers: ${JSON.stringify(headers)}`, 'debug');\r\n  }\r\n}\r\n\r\n/**\r\n * Log a response\r\n * \r\n * @param {Response} response - HTTP response to log\r\n */\r\nexport function logResponse(response) {\r\n  log(`Response: ${response.status} ${response.statusText}`, 'info');\r\n  \r\n  if (debugMode) {\r\n    // Log headers in debug mode\r\n    const headers = {};\r\n    for (const [key, value] of response.headers.entries()) {\r\n      headers[key] = value;\r\n    }\r\n    log(`Headers: ${JSON.stringify(headers)}`, 'debug');\r\n  }\r\n}", "/**\r\n * Key generator utilities\r\n * \r\n * This module provides functions for generating and validating\r\n * random keys used for game state identification.\r\n */\r\n\r\n/**\r\n * Generate a random alphanumeric key\r\n * \r\n * @param {number} length - Length of the key\r\n * @returns {string} Random alphanumeric key\r\n */\r\nexport function generateRandomKey(length = 4) {\r\n    const characters = \r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let key = '';\r\n    \r\n    // Use crypto if available for better randomness\r\n    const getRandomValue = () => {\r\n      if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n        const array = new Uint32Array(1);\r\n        crypto.getRandomValues(array);\r\n        return array[0] / (0xFFFFFFFF + 1);\r\n      } else {\r\n        return Math.random();\r\n      }\r\n    };\r\n    \r\n    for (let i = 0; i < length; i++) {\r\n      const randomIndex = Math.floor(getRandomValue() * characters.length);\r\n      key += characters.charAt(randomIndex);\r\n    }\r\n    \r\n    return key;\r\n  }\r\n  \r\n  /**\r\n   * Generate a key with a specific prefix\r\n   * \r\n   * @param {string} prefix - Prefix for the key\r\n   * @param {number} length - Length of the random part\r\n   * @returns {string} Key with prefix\r\n   */\r\n  export function generatePrefixedKey(prefix, length = 4) {\r\n    return `${prefix}_${generateRandomKey(length)}`;\r\n  }\r\n  \r\n  /**\r\n   * Validate a key format\r\n   * \r\n   * @param {string} key - Key to validate\r\n   * @param {number} length - Expected length\r\n   * @returns {boolean} Whether the key is valid\r\n   */\r\n  export function isValidKey(key, length = 4) {\r\n    // Key must be a string\r\n    if (typeof key !== 'string') {\r\n      return false;\r\n    }\r\n    \r\n    // Key must be the right length\r\n    if (key.length !== length) {\r\n      return false;\r\n    }\r\n    \r\n    // Key must contain only alphanumeric characters\r\n    const alphanumericRegex = /^[a-zA-Z0-9]+$/;\r\n    return alphanumericRegex.test(key);\r\n  }\r\n  \r\n  /**\r\n   * Validate a prefixed key format\r\n   * \r\n   * @param {string} key - Key to validate\r\n   * @param {string} prefix - Expected prefix\r\n   * @param {number} length - Expected length of random part\r\n   * @returns {boolean} Whether the key is valid\r\n   */\r\n  export function isValidPrefixedKey(key, prefix, length = 4) {\r\n    // Key must be a string\r\n    if (typeof key !== 'string') {\r\n      return false;\r\n    }\r\n    \r\n    // Key must start with prefix followed by underscore\r\n    if (!key.startsWith(`${prefix}_`)) {\r\n      return false;\r\n    }\r\n    \r\n    // Extract the random part\r\n    const randomPart = key.substring(prefix.length + 1);\r\n    \r\n    // Validate the random part\r\n    return isValidKey(randomPart, length);\r\n  }", "/**\r\n * Database client configuration for Neon PostgreSQL\r\n * \r\n * This module sets up the connection to Neon PostgreSQL database\r\n * using their serverless driver optimized for Cloudflare Workers.\r\n */\r\nimport { Pool } from '@neondatabase/serverless';\r\nimport { log } from '../utils/logging.js';\r\n\r\n/**\r\n * Create a database pool using the provided connection string\r\n * \r\n * @param {string} connectionString - Neon PostgreSQL connection string\r\n * @returns {Pool} Database connection pool\r\n */\r\nexport function createPool(connectionString) {\r\n  if (!connectionString) {\r\n    log('No database connection string provided', 'error');\r\n    throw new Error('Database connection string is required');\r\n  }\r\n  \r\n  // Log connection attempt with redacted password\r\n  const redactedUrl = connectionString.replace(\r\n    /postgresql:\\/\\/([^:]+):([^@]+)@/,\r\n    'postgresql://$1:***@'\r\n  );\r\n  log(`Connecting to Neon PostgreSQL: ${redactedUrl}`, 'debug');\r\n  \r\n  // Create connection pool\r\n  return new Pool({\r\n    connectionString,\r\n    ssl: true\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize database tables if they don't exist\r\n * \r\n * @param {Pool} pool - Database connection pool\r\n */\r\nexport async function initializeTables(pool) {\r\n  try {\r\n    // Create the key_value_pairs table if it doesn't exist\r\n    await pool.query(`\r\n      CREATE TABLE IF NOT EXISTS key_value_pairs (\r\n        key TEXT PRIMARY KEY,\r\n        value TEXT,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        size_bytes BIGINT,\r\n        metadata JSONB DEFAULT '{}'::jsonb\r\n      )\r\n    `);\r\n    \r\n    // Create indices for performance\r\n    await pool.query(`\r\n      CREATE INDEX IF NOT EXISTS idx_key_value_pairs_created_at \r\n      ON key_value_pairs (created_at)\r\n    `);\r\n    \r\n    await pool.query(`\r\n      CREATE INDEX IF NOT EXISTS idx_key_value_pairs_accessed_at \r\n      ON key_value_pairs (accessed_at)\r\n    `);\r\n    \r\n    log('Database tables and indices initialized', 'info');\r\n    return true;\r\n  } catch (error) {\r\n    log(`Error initializing database tables: ${error.message}`, 'error');\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Get database client from environment\r\n * \r\n * @param {Object} env - Environment variables\r\n * @returns {Pool} Database connection pool\r\n */\r\nexport function getDbClient(env) {\r\n  const connectionString = env.DATABASE_URL;\r\n  return createPool(connectionString);\r\n}", "/**\r\n * Game state database operations\r\n * \r\n * This module handles all database interactions for game state\r\n * storage, retrieval, and management.\r\n */\r\nimport { getDbClient } from './client';\r\nimport { log } from '../utils/logging.js';\r\n\r\n/**\r\n * Retrieve a game state by key\r\n * \r\n * @param {Object} env - Environment variables\r\n * @param {string} key - Game state key\r\n * @returns {Object} Game state data and metadata\r\n */\r\nexport async function getGameStateByKey(env, key) {\r\n  const pool = getDbClient(env);\r\n  \r\n  try {\r\n    // Query the database for the game state\r\n    const result = await pool.query(\r\n      'SELECT value, created_at, accessed_at, size_bytes, metadata FROM key_value_pairs WHERE key = $1',\r\n      [key]\r\n    );\r\n    \r\n    if (result.rows.length === 0) {\r\n      return { found: false };\r\n    }\r\n    \r\n    // Update accessed_at timestamp\r\n    await updateAccessTimestamp(env, key);\r\n    \r\n    // Return the game state data and metadata\r\n    return {\r\n      found: true,\r\n      value: result.rows[0].value,\r\n      created_at: result.rows[0].created_at,\r\n      accessed_at: result.rows[0].accessed_at,\r\n      size_bytes: result.rows[0].size_bytes,\r\n      metadata: result.rows[0].metadata\r\n    };\r\n  } catch (error) {\r\n    log(`Error retrieving game state: ${error.message}`, 'error');\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Store a game state\r\n * \r\n * @param {Object} env - Environment variables\r\n * @param {string} key - Game state key\r\n * @param {string} value - Game state data\r\n * @param {Object} metadata - Additional metadata\r\n * @returns {Object} Result with key and size\r\n */\r\nexport async function storeGameState(env, key, value, metadata = {}) {\r\n  const pool = getDbClient(env);\r\n  \r\n  try {\r\n    // Calculate size in bytes\r\n    const sizeBytes = new TextEncoder().encode(value).length;\r\n    \r\n    // Store the game state\r\n    await pool.query(\r\n      `INSERT INTO key_value_pairs (key, value, created_at, accessed_at, size_bytes, metadata) \r\n       VALUES ($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $3, $4) \r\n       ON CONFLICT (key) DO UPDATE \r\n       SET value = $2, accessed_at = CURRENT_TIMESTAMP, size_bytes = $3, metadata = $4`,\r\n      [key, value, sizeBytes, JSON.stringify(metadata)]\r\n    );\r\n    \r\n    log(`Stored game state with key ${key} (${sizeBytes} bytes)`, 'info');\r\n    \r\n    return {\r\n      success: true,\r\n      key: key,\r\n      size_bytes: sizeBytes\r\n    };\r\n  } catch (error) {\r\n    log(`Error storing game state: ${error.message}`, 'error');\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a game state by key\r\n * \r\n * @param {Object} env - Environment variables\r\n * @param {string} key - Game state key\r\n * @returns {Object} Result with deletion status\r\n */\r\nexport async function deleteGameState(env, key) {\r\n  const pool = getDbClient(env);\r\n  \r\n  try {\r\n    // Delete the game state\r\n    const result = await pool.query(\r\n      'DELETE FROM key_value_pairs WHERE key = $1',\r\n      [key]\r\n    );\r\n    \r\n    return {\r\n      success: true,\r\n      deleted: result.rowCount > 0\r\n    };\r\n  } catch (error) {\r\n    log(`Error deleting game state: ${error.message}`, 'error');\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Update access timestamp for a game state\r\n * \r\n * @param {Object} env - Environment variables\r\n * @param {string} key - Game state key\r\n */\r\nexport async function updateAccessTimestamp(env, key) {\r\n  const pool = getDbClient(env);\r\n  \r\n  try {\r\n    await pool.query(\r\n      'UPDATE key_value_pairs SET accessed_at = CURRENT_TIMESTAMP WHERE key = $1',\r\n      [key]\r\n    );\r\n    \r\n    log(`Updated access timestamp for key ${key}`, 'debug');\r\n  } catch (error) {\r\n    log(`Error updating access timestamp: ${error.message}`, 'warn');\r\n    // Don't throw - this is a non-critical operation\r\n  }\r\n}\r\n\r\n/**\r\n * Clean up old game states\r\n * \r\n * @param {Object} env - Environment variables\r\n * @param {number} days - Number of days to keep game states\r\n * @returns {Object} Result with count of deleted records\r\n */\r\nexport async function cleanupOldGameStates(env, days = 30) {\r\n  const pool = getDbClient(env);\r\n  \r\n  try {\r\n    const result = await pool.query(\r\n      `DELETE FROM key_value_pairs WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '${days} days'`\r\n    );\r\n    \r\n    log(`Cleaned up ${result.rowCount} old game states`, 'info');\r\n    \r\n    return {\r\n      success: true,\r\n      count: result.rowCount\r\n    };\r\n  } catch (error) {\r\n    log(`Error cleaning up old game states: ${error.message}`, 'error');\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Get database statistics\r\n * \r\n * @param {Object} env - Environment variables\r\n * @returns {Object} Database statistics\r\n */\r\nexport async function getDatabaseStats(env) {\r\n  const pool = getDbClient(env);\r\n  \r\n  try {\r\n    // Get record count\r\n    const countResult = await pool.query('SELECT COUNT(*) FROM key_value_pairs');\r\n    \r\n    // Get total size\r\n    const sizeResult = await pool.query('SELECT SUM(size_bytes) FROM key_value_pairs');\r\n    \r\n    // Get oldest and newest records\r\n    const oldestResult = await pool.query('SELECT MIN(created_at) FROM key_value_pairs');\r\n    const newestResult = await pool.query('SELECT MAX(created_at) FROM key_value_pairs');\r\n    \r\n    // Get recently accessed records\r\n    const recentResult = await pool.query(\r\n      `SELECT COUNT(*) FROM key_value_pairs WHERE accessed_at > CURRENT_TIMESTAMP - INTERVAL '1 day'`\r\n    );\r\n    \r\n    return {\r\n      success: true,\r\n      stats: {\r\n        totalRecords: parseInt(countResult.rows[0].count, 10),\r\n        totalSizeBytes: parseInt(sizeResult.rows[0].sum || '0', 10),\r\n        oldestRecord: oldestResult.rows[0].min,\r\n        newestRecord: newestResult.rows[0].max,\r\n        recentlyAccessed: parseInt(recentResult.rows[0].count, 10)\r\n      }\r\n    };\r\n  } catch (error) {\r\n    log(`Error getting database stats: ${error.message}`, 'error');\r\n    throw error;\r\n  }\r\n}", "/**\r\n * Game state API handlers\r\n * \r\n * This module provides HTTP handlers for game state operations,\r\n * mapping API requests to database operations.\r\n */\r\nimport { log } from '../utils/logging.js';\r\nimport { isValidKey, generateRandomKey } from '../utils/key-generator.js';\r\nimport * as gameStateDb from '../db/game-state.js';\r\n\r\n/**\r\n * Get a game state by key\r\n * \r\n * @param {Request} request - HTTP request\r\n * @returns {Response} HTTP response\r\n */\r\nexport async function getGameState(request) {\r\n  const url = new URL(request.url);\r\n  const key = url.searchParams.get('key');\r\n  \r\n  // Set content type to JSON for all responses\r\n  const headers = { 'Content-Type': 'application/json' };\r\n  \r\n  // Validate key parameter\r\n  if (!key) {\r\n    log('Request missing key parameter', 'warn');\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: 'Key parameter is missing' \r\n      }), \r\n      { status: 400, headers }\r\n    );\r\n  }\r\n  \r\n  // Validate key format\r\n  if (!isValidKey(key)) {\r\n    log(`Invalid key format: ${key}`, 'warn');\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: 'Invalid key format' \r\n      }), \r\n      { status: 400, headers }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // Get game state from database\r\n    const result = await gameStateDb.getGameStateByKey(request.env, key);\r\n    \r\n    if (!result.found) {\r\n      log(`Game state with key ${key} not found`, 'warn');\r\n      return new Response(\r\n        JSON.stringify({ \r\n          success: false, \r\n          error: 'Game state not found' \r\n        }), \r\n        { status: 404, headers }\r\n      );\r\n    }\r\n    \r\n    // Parse game state data\r\n    try {\r\n      const jsonData = JSON.parse(result.value);\r\n      \r\n      // Return the game state data directly\r\n      // This matches the expected format for the client\r\n      return new Response(\r\n        result.value,\r\n        { status: 200, headers }\r\n      );\r\n    } catch (parseError) {\r\n      log(`Error parsing JSON data: ${parseError.message}`, 'error');\r\n      return new Response(\r\n        JSON.stringify({ \r\n          success: false, \r\n          error: 'Error parsing game state data',\r\n          details: parseError.message\r\n        }), \r\n        { status: 500, headers }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    log(`Error retrieving game state: ${error.message}`, 'error');\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: 'Database error',\r\n        details: error.message\r\n      }), \r\n      { status: 500, headers }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Store a game state\r\n * \r\n * @param {Request} request - HTTP request\r\n * @returns {Response} HTTP response\r\n */\r\nexport async function storeGameState(request) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n  \r\n  try {\r\n    // Parse request body\r\n    const body = await request.json();\r\n    \r\n    // Validate body\r\n    if (!body || (!body.gameState && !body.exportData)) {\r\n      log('Request missing gameState in body', 'warn');\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Game state data is missing'\r\n        }),\r\n        { status: 400, headers }\r\n      );\r\n    }\r\n    \r\n    // Get game state data from request\r\n    // Support both formats: gameState (HTTP API) and exportData (Socket.IO compatible)\r\n    const gameStateData = body.gameState || body.exportData;\r\n    \r\n    // Get or generate key\r\n    const key = body.key || generateRandomKey(4);\r\n    \r\n    // Validate custom key if provided\r\n    if (body.key && !isValidKey(body.key)) {\r\n      log(`Invalid custom key format: ${body.key}`, 'warn');\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid key format'\r\n        }),\r\n        { status: 400, headers }\r\n      );\r\n    }\r\n    \r\n    // Validate data type\r\n    const gameStateStr = typeof gameStateData === 'string' \r\n      ? gameStateData \r\n      : JSON.stringify(gameStateData);\r\n    \r\n    // Check size\r\n    const sizeBytes = new TextEncoder().encode(gameStateStr).length;\r\n    const sizeMB = sizeBytes / (1024 * 1024);\r\n    const maxSizeMB = 50; // 50MB limit\r\n    \r\n    if (sizeMB > maxSizeMB) {\r\n      log(`Game state too large: ${sizeMB.toFixed(2)}MB > ${maxSizeMB}MB`, 'warn');\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: `Game state too large (${sizeMB.toFixed(2)}MB > ${maxSizeMB}MB limit)`\r\n        }),\r\n        { status: 413, headers }\r\n      );\r\n    }\r\n    \r\n    // Collect metadata\r\n    const metadata = {\r\n      ...(body.metadata || {}),\r\n      userAgent: request.headers.get('User-Agent'),\r\n      contentType: request.headers.get('Content-Type'),\r\n      timestamp: new Date().toISOString(),\r\n      origin: request.headers.get('Origin')\r\n    };\r\n    \r\n    // Store game state\r\n    const result = await gameStateDb.storeGameState(\r\n      request.env,\r\n      key,\r\n      gameStateStr,\r\n      metadata\r\n    );\r\n    \r\n    // Return success response\r\n    // Support exportGameStateSuccessful format for Socket.IO compatibility\r\n    if (body.exportData) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: true,\r\n          key: key,\r\n          size: {\r\n            bytes: result.size_bytes,\r\n            megabytes: (result.size_bytes / (1024 * 1024)).toFixed(2)\r\n          }\r\n        }),\r\n        { status: 201, headers }\r\n      );\r\n    } else {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: true,\r\n          key: key,\r\n          size: {\r\n            bytes: result.size_bytes,\r\n            megabytes: (result.size_bytes / (1024 * 1024)).toFixed(2)\r\n          }\r\n        }),\r\n        { status: 201, headers }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    log(`Error storing game state: ${error.message}`, 'error');\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Error storing game state in database',\r\n        details: error.message\r\n      }),\r\n      { status: 500, headers }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a game state\r\n * \r\n * @param {Request} request - HTTP request\r\n * @returns {Response} HTTP response\r\n */\r\nexport async function deleteGameState(request) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n  \r\n  // Get key from URL params\r\n  const { params } = request;\r\n  const key = params.key;\r\n  \r\n  // Validate key\r\n  if (!isValidKey(key)) {\r\n    log(`Invalid key format for deletion: ${key}`, 'warn');\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Invalid key format'\r\n      }),\r\n      { status: 400, headers }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // Delete game state\r\n    const result = await gameStateDb.deleteGameState(request.env, key);\r\n    \r\n    if (result.deleted) {\r\n      log(`Deleted game state ${key} from database`, 'success');\r\n      return new Response(\r\n        JSON.stringify({ success: true }),\r\n        { status: 200, headers }\r\n      );\r\n    } else {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Game state not found'\r\n        }),\r\n        { status: 404, headers }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    log(`Error deleting game state: ${error.message}`, 'error');\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Database error',\r\n        details: error.message\r\n      }),\r\n      { status: 500, headers }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Get database statistics\r\n * \r\n * @param {Request} request - HTTP request\r\n * @returns {Response} HTTP response\r\n */\r\nexport async function getStats(request) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n  \r\n  try {\r\n    const stats = await gameStateDb.getDatabaseStats(request.env);\r\n    \r\n    return new Response(\r\n      JSON.stringify(stats),\r\n      { status: 200, headers }\r\n    );\r\n  } catch (error) {\r\n    log(`Error getting database stats: ${error.message}`, 'error');\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Error retrieving database statistics',\r\n        details: error.message\r\n      }),\r\n      { status: 500, headers }\r\n    );\r\n  }\r\n}", "// File: workers/src/api/health.js\r\n/**\r\n * Health check API handlers\r\n * \r\n * This module provides comprehensive status checks for the worker and database\r\n */\r\nimport { log } from '../utils/logging.js';\r\nimport { getDbClient } from '../db/client';\r\n\r\nexport async function getHealth(request) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n  \r\n  try {\r\n    const healthData = {\r\n      status: 'ok',\r\n      timestamp: new Date().toISOString(),\r\n      version: '1.5.1',\r\n      worker: {\r\n        status: 'ok',\r\n        environment: request.env.ENVIRONMENT || 'production'\r\n      },\r\n      socketio: {\r\n        status: 'limited',\r\n        message: 'Basic Socket.IO compatibility layer available'\r\n      },\r\n      database: {\r\n        status: 'checking'\r\n      },\r\n      features: {\r\n        rest_api: 'full',\r\n        websockets: 'partial',\r\n        socketio: 'minimal',\r\n        database: 'full'\r\n      }\r\n    };\r\n    \r\n    // Test database connection if available\r\n    try {\r\n      if (request.env.DATABASE_URL) {\r\n        const pool = getDbClient(request.env);\r\n        const result = await pool.query('SELECT NOW() as time');\r\n        \r\n        healthData.database = {\r\n          status: 'ok',\r\n          time: result.rows[0].time\r\n        };\r\n      } else {\r\n        healthData.database = {\r\n          status: 'disabled',\r\n          message: 'No database connection available'\r\n        };\r\n      }\r\n    } catch (dbError) {\r\n      log(`Database health check failed: ${dbError.message}`, 'error');\r\n      \r\n      healthData.database = {\r\n        status: 'error',\r\n        error: dbError.message\r\n      };\r\n      \r\n      healthData.status = 'degraded';\r\n    }\r\n    \r\n    return new Response(\r\n      JSON.stringify(healthData),\r\n      { \r\n        status: healthData.status === 'ok' ? 200 : 503,\r\n        headers\r\n      }\r\n    );\r\n  } catch (error) {\r\n    log(`Error in health check: ${error.message}`, 'error');\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        status: 'error',\r\n        timestamp: new Date().toISOString(),\r\n        error: error.message\r\n      }),\r\n      { status: 500, headers }\r\n    );\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["storeGameState", "deleteGameState", "storeGameState", "deleteGameState"]
}
