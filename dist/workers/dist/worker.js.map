{
  "version": 3,
  "sources": ["../index.js"],
  "sourcesContent": ["/**\r\n * PTCG-Sim-Meta Worker\r\n * \r\n * A simplified worker for handling API requests and Socket.IO connections.\r\n */\r\n\r\n// CORS headers for cross-origin requests\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With'\r\n};\r\n\r\n// Handle OPTIONS requests for CORS preflight\r\nfunction handleOptions(request) {\r\n  return new Response(null, {\r\n    status: 204,\r\n    headers: corsHeaders\r\n  });\r\n}\r\n\r\n// Health check endpoint\r\nasync function handleHealthCheck() {\r\n  return new Response(\r\n    JSON.stringify({\r\n      status: 'ok',\r\n      timestamp: new Date().toISOString(),\r\n      message: 'PTCG-Sim-Meta API is running'\r\n    }),\r\n    {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...corsHeaders\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n// Game state storage\r\nasync function handleStoreGameState(request) {\r\n  try {\r\n    const data = await request.json();\r\n    \r\n    if (!data.gameState) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Game state data is missing'\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        }\r\n      );\r\n    }\r\n    \r\n    // Generate a random key\r\n    const key = Array.from({ length: 4 }, () => \r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'[Math.floor(Math.random() * 62)]\r\n    ).join('');\r\n    \r\n    // In a real implementation, you would store this in KV or D1\r\n    // For now, we'll just return the key\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        key\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Error processing request'\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n// Get game state by key\r\nasync function handleGetGameState(request) {\r\n  const url = new URL(request.url);\r\n  const key = url.searchParams.get('key');\r\n  \r\n  if (!key) {\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Key parameter is missing'\r\n      }),\r\n      {\r\n        status: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n  }\r\n  \r\n  // In a real implementation, you would retrieve from KV or D1\r\n  // For now, return a placeholder response\r\n  \r\n  return new Response(\r\n    JSON.stringify({\r\n      success: false,\r\n      error: 'Game state not found. This is a simplified implementation.'\r\n    }),\r\n    {\r\n      status: 404,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...corsHeaders\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n// Socket.IO connection handling (simplified)\r\nasync function handleSocketRequest(request) {\r\n  return new Response(\r\n    JSON.stringify({\r\n      success: false,\r\n      error: 'Socket.IO implementation is not available in this simplified worker.'\r\n    }),\r\n    {\r\n      status: 501,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...corsHeaders\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n// Main fetch handler for the worker\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    try {\r\n      const url = new URL(request.url);\r\n      const path = url.pathname;\r\n      \r\n      // Handle CORS preflight requests\r\n      if (request.method === 'OPTIONS') {\r\n        return handleOptions(request);\r\n      }\r\n      \r\n      // Handle API routes\r\n      if (path === '/api/health' || path === '/health') {\r\n        return handleHealthCheck();\r\n      }\r\n      \r\n      if (path === '/api/storeGameState' && request.method === 'POST') {\r\n        return handleStoreGameState(request);\r\n      }\r\n      \r\n      if (path === '/api/importData' && request.method === 'GET') {\r\n        return handleGetGameState(request);\r\n      }\r\n      \r\n      // Handle Socket.IO routes\r\n      if (path.startsWith('/socket.io/')) {\r\n        return handleSocketRequest(request);\r\n      }\r\n      \r\n      // Handle unrecognized API routes\r\n      if (path.startsWith('/api/')) {\r\n        return new Response(\r\n          JSON.stringify({\r\n            success: false,\r\n            error: 'Unknown API endpoint'\r\n          }),\r\n          {\r\n            status: 404,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          }\r\n        );\r\n      }\r\n      \r\n      // Pass all other requests through\r\n      return new Response('Not Found', { status: 404 });\r\n      \r\n    } catch (error) {\r\n      // Handle errors\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Internal Server Error',\r\n          message: error.message\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n};"],
  "mappings": "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",
  "names": []
}
